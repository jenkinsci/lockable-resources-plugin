/*
 * The MIT License
 *
 * Automatic resource creation based on node labels by Darius Mihai (mihai_darius22@yahoo.com)
 * Copyright (C) 2015 Freescale Semiconductor, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.jenkins.plugins.lockableresources.autogen;

import hudson.model.Computer;
import hudson.model.Node;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import jenkins.model.Jenkins;
import org.jenkins.plugins.lockableresources.LockableResource;
import org.jenkins.plugins.lockableresources.LockableResourcesManager;

public class Utils {

	public static String  AUTOGEN_NAME_PREFIX   = "AutoGenForNode";
	public static String  AUTOGEN_NAME_INFIX    = "WithLabels";
	public static String  AUTOGEN_DESCRIPTION   = "Automatically generated resource";
	public static boolean AUTOGEN_AUTOGENERATED = true;

	/**
	 * @return Retrieve a list of all online nodes in the system, including the master node
	 */
	public static Set<Node> getAllOnlineNodes() {
		Set<Node> nodes = new HashSet<Node>();

		/* get all nodes attached to an online computer */
		for(Computer comp : Jenkins.getInstance().getComputers())
			if(comp.isOnline())
				nodes.add(comp.getNode());

		/* the master node should always be online */
		nodes.add(Jenkins.getInstance());

		return nodes;
	}

	/**
	 * @param labelSet A set of labels required for a node to have
	 * @param node The node for which this resource is created
	 * @return A name for a automatically generated resource. The name has the following structure:
	 * AUTOGET_NAME_PREFIX_nodeName_AUTOGEN_NAME_INFIX_label1[_label2]...[_labelN]
	 */
	private static String getAutoGenResourceName(LabelSet labelSet,
												 String nodeName) {
		String name ;
		name  = AUTOGEN_NAME_PREFIX;
		name += "_" + nodeName;
		name += "_" + AUTOGEN_NAME_INFIX;

		for(String s : labelSet.getLabelsSet())
			name += "_" + s;

		return name;
	}

	/**
	 * @param node The node for which the labels are required
	 * @return A list of labels associated with the node
	 */
	private static List<String> getNodeLabels(Node node) {
		return Arrays.asList(node.getLabelString().split("\\s+"));
	}

	/**
	 * Different from Jenkins.getInstance().getNode(String nodeName), as the Jenkins master itself can be
	 * returned, if the node name is "master".
	 * @param nodeName The name of the node to be retrieved
	 * @return The node with the given name.
	 */
	public static Node getNodeWithName(String nodeName) {
		return nodeName.equals("master") ? Jenkins.getInstance() : Jenkins.getInstance().getNode(nodeName);
	}

	/**
	 * @param labelSets A collection of 'LabelSet' variables that contains information about
	 * requested combinations of labels
	 * @return A set of "LockableResource"s that were created and reserved for a node
	 * and have the requested labels associated
	 */
	public static Set<LockableResource> autoCreateResources(Collection<LabelSet> labelSets) {
		List<String> nodeLabels;
		String nodeName;
		Set<LockableResource> autoGeneratedResources = new HashSet<LockableResource>();

		for(Node node : getAllOnlineNodes()) {
			nodeLabels = getNodeLabels(node);
			nodeName = node.getNodeName().equals("") ? "master" : node.getNodeName();

			for(LabelSet ls : labelSets)
				if(nodeLabels.containsAll(ls.getLabelsSet()))
					autoGeneratedResources.add(new LockableResource(getAutoGenResourceName(ls, nodeName),
																	AUTOGEN_DESCRIPTION,
																	ls.getLabels(),
																	nodeName,
																	"",
																	AUTOGEN_AUTOGENERATED));
		}

		return autoGeneratedResources;
	}

	/**
	 * Used to automatically generate resources for the node with the given name based on the
	 * LabelSet. The program will look into the 'labelSets' in LockableResourcesManager and
	 * will create resources for each label set that is a subset of the given 'labels' set.
	 * This method adds resources directly to the 'resources' set in LockableResourcesManager.
	 * @param node The node for which the resources are created
	 * @param labels A LabelSet that contains the labels associated with the node
	 */
	public static void autoGenerateNodeResources(Node node, LabelSet labels) {
		Set<LabelSet> labelSets = LockableResourcesManager.get().getLabelSets();
		Set<LockableResource> autoGeneratedResources = new HashSet<LockableResource>();
		String nodeName = node.getNodeName().equals("") ? "master" : node.getNodeName();

		for(LabelSet ls : labelSets)
			if(labels.containsLabels(ls))
				autoGeneratedResources.add(new LockableResource(getAutoGenResourceName(ls, nodeName),
																AUTOGEN_DESCRIPTION,
																ls.getLabels(),
																nodeName,
																"",
																AUTOGEN_AUTOGENERATED));

		LockableResourcesManager.get().addAllResources(autoGeneratedResources);
	}

	/**
	 * Calls the method with the same name in LockableResourcesManager to destroy all
	 * automatically generated resources for the given node
	 * @param node The node for which resources are removed
	 */
	public static void removeAutoGenResourcesForNode(Node node) {
		LockableResourcesManager.get().removeAutoGenResourcesForNode(node);
	}
}
